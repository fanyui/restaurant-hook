service:
  name: restaurant-hook
# app and org for use with dashboard.serverless.com
#app: feeder
#org: com.afayi.restaurarnt-hook
# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  tracing:
    lambda: true
    apiGateway: true  
    
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    RESTAURANT_TABLE: Restaurant-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    S3_BUCKET: restaurant-hook-${self:provider.stage}
    INDEX_NAME: restaurantindex
    MENUS_TABLE: Menus-${self:provider.stage}
    
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  serverless-offline:
    - port: 3003
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  GetRestaurant:
    handler: src/lambda/http/getRestaurant.handler
    events:
      - http:
          method: get
          path: restaurant
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query 
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  GetMenu:
    handler: src/lambda/http/getMenus.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: restaurant/{restaurantId}/menu
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query 
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MENUS_TABLE}
  
      - Effect: Allow
        Action:
          - dynamodb:Query 
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"  
  CreateRestaurant:
    handler: src/lambda/http/createRestaurant.handler
    events:
      - http:
          method: post
          path: restaurant
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateMenu:
    handler: src/lambda/http/createMenu.handler
    events:
      - http:
          method: post
          path: restaurant/{restaurantId}/menu
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MENUS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query 
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateRestaurant:
    handler: src/lambda/http/updateRestaurant.handler
    events:
      - http:
          method: patch
          path: restaurant/{restaurantId}
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  DeleteRestaurant:
    handler: src/lambda/http/deleteRestaurant.handler
    events:
      - http:
          method: delete
          path: restaurant/{restaurantId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: restaurant/{restaurantId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANT_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    RestaurantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S 
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: restaurantId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RESTAURANT_TABLE}

    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S 
          - AttributeName: timestamp
            AttributeType: S 

        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MENUS_TABLE}
        # LocalSecondaryIndexes:
        #   - IndexName: ${self:provider.environment.INDEX_NAME}
        #     KeySchema:
        #       - AttributeName: restaurantId
        #         KeyType: HASH
        #       - AttributeName: createdAt
        #         KeyType: RANGE
        #     Projection:
        #       ProjectionType: ALL # What attributes will be copied to an index
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref S3Bucket

